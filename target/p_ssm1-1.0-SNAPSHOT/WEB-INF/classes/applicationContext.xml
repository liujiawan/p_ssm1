<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:p="http://www.springframework.org/schema/p"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xsi:schemaLocation="
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.1.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         ">
         <!-- 自动扫描 -->
	<context:component-scan base-package="com.wanhejia" />
     <!-- 引入jdbc配置文件 --><!--  
    <context:property-placeholder location="classpath:jdbc.properties"/>
    -->
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>
    <!-- 1. 数据源 : DriverManagerDataSource -->  
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${ds.initialSize}"/>
        <property name="minIdle" value="${ds.minIdle}"/>
        <property name="maxActive" value="${ds.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${ds.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="18000" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
    </bean>
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username1}"/>
        <property name="password" value="${jdbc.password1}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${ds.initialSize}"/>
        <property name="minIdle" value="${ds.minIdle}"/>
        <property name="maxActive" value="${ds.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${ds.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="18000" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
    </bean>
     <!--<bean id="dataSource" class="com.wanhejia.utils.DynamicDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--<entry key="dataSource1" value-ref="dataSource1"/>-->
                <!--<entry key="dataSource2" value-ref="dataSource2"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--&lt;!&ndash;默认数据源&ndash;&gt;-->
        <!--<property name="defaultTargetDataSource" ref="dataSource1"/>-->
    <!--</bean>-->
    <!--  2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源  MyBatis定义数据源,同意加载配置   -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource1"/>
       <!-- 加载相应的配置 --> 
        <property name="configLocation" value="classpath:mybatis-config.xml" />   
    </bean> 
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<bean name="springContextUtil" class="com.wanhejia.utils.SpringContextUtil" scope="singleton"></bean>
      <!--   3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory   basePackage:指定sql映射文件/接口所在的包（自动扫描）  -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
   		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
       	<property name="basePackage" value="com.wanhejia.dao"/> 
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource2" />
        <qualifier value="isap"/>
    </bean>
    <!--引入注解的方式-->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!--&lt;!&ndash; jedis 配置 &ndash;&gt;-->
    <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxIdle" value="${redis.maxIdle}"/>-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}"/>-->
        <!--<property name="testOnBorrow" value="${redis.testOnBorrow}"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; redis服务器中心 &ndash;&gt;-->
    <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="poolConfig" ref="poolConfig"/>-->
        <!--<property name="port" value="${redis.port}"/>-->
        <!--<property name="hostName" value="${redis.host}"/>-->
        <!--<property name="password" value="${redis.password}"/>-->
        <!--<property name="timeout" value="${redis.timeout}"/>-->
    <!--</bean>-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="connectionFactory"/>-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; cache配置 &ndash;&gt;-->
    <!--<bean id="methodCacheInterceptor" class="com.wanhejia.intercept.MethodCacheInterceptor">-->
        <!--<property name="redisUtil" ref="redisUtil"/>-->
    <!--</bean>-->
    <!--<bean id="redisUtil" class="com.wanhejia.utils.RedisUtil">-->
        <!--<property name="redisTemplate" ref="redisTemplate"/>-->
    <!--</bean>-->
    <!--<bean id="dataSourceExchange" class="com.wanhejia.utils.DataSourceExchange"/>-->
    <!--<aop:config proxy-target-class="false">-->
        <!--<aop:pointcut id="controllerMethodPointcut" expression="execution(* com.wanhejia.service.*.findPermissionByUserId*(..))"/>-->
        <!--&lt;!&ndash;<aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>&ndash;&gt;-->
        <!--&lt;!&ndash;所有数据库操作的方法加入切面&ndash;&gt;-->
        <!--<aop:aspect ref="dataSourceExchange">-->
            <!--<aop:pointcut id="dataSourcePointcut" expression="execution(* com.wanhejia.service.*.findByNames(..))"/>-->
            <!--<aop:before pointcut-ref="dataSourcePointcut" method="before"/>-->
            <!--<aop:after pointcut-ref="dataSourcePointcut" method="after"/>-->
        <!--</aop:aspect>-->
    <!--</aop:config>-->
 </beans>